name: üóëÔ∏è Terraform Destroy

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: string
      working_directory:
        description: 'Working directory for Terraform'
        required: false
        type: string
        default: '.'
      terraform_version:
        description: 'Terraform version to use'
        required: false
        type: string
        default: '1.6.0'
      auto_approve:
        description: 'Auto-approve the destroy (only for dev)'
        required: false
        type: boolean
        default: false
      confirmation_text:
        description: 'Confirmation text (must match environment name)'
        required: false
        type: string
        default: ''
    outputs:
      destroy_summary:
        description: 'Summary of the destroy operation'
        value: ${{ jobs.destroy.outputs.destroy_summary }}
      resources_destroyed:
        description: 'Number of resources destroyed'
        value: ${{ jobs.destroy.outputs.resources_destroyed }}

env:
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  TF_VAR_environment: ${{ inputs.environment }}

jobs:
  # Pre-destroy validation and safety checks
  pre-destroy-validation:
    name: üîç Pre-Destroy Validation
    runs-on: ubuntu-latest
    outputs:
      can_proceed: ${{ steps.validation.outputs.can_proceed }}
      requires_confirmation: ${{ steps.validation.outputs.requires_confirmation }}
      resource_count: ${{ steps.validation.outputs.resource_count }}
    
    steps:
      - name: üîÑ Checkout Repository
        uses: actions/checkout@v4
      
      - name: üîß Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Test AWS Access
        run: |
          aws sts get-caller-identity
          echo "‚úÖ OIDC authentication successful!"  
      
      - name: Terraform Init
        working-directory: ${{ inputs.working_directory }}
        run: |
          echo "Initializing Terraform..."
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ inputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION || 'us-east-1' }}" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}"
      
      - name: üîç Analyze Current State
        id: validation
        working-directory: ${{ inputs.working_directory }}
        run: |
          echo "üîç Analyzing current infrastructure state..."
          
          # Check if state exists and has resources
          if ! terraform state list > state_list.txt 2>/dev/null; then
            echo "‚ö†Ô∏è No Terraform state found or state is empty"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Count resources
          RESOURCE_COUNT=$(wc -l < state_list.txt || echo "0")
          echo "üìä Found $RESOURCE_COUNT resources in state"
          echo "resource_count=$RESOURCE_COUNT" >> $GITHUB_OUTPUT
          
          if [[ $RESOURCE_COUNT -eq 0 ]]; then
            echo "‚úÖ No resources to destroy"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Show what will be destroyed
          echo "üóëÔ∏è Resources that will be destroyed:"
          cat state_list.txt
          
          # Check for critical resources
          CRITICAL_RESOURCES=()
          while IFS= read -r resource; do
            if [[ "$resource" =~ aws_db_instance|aws_rds_cluster|aws_s3_bucket|aws_dynamodb_table ]]; then
              CRITICAL_RESOURCES+=("$resource")
            fi
          done < state_list.txt
          
          if [[ ${#CRITICAL_RESOURCES[@]} -gt 0 ]]; then
            echo "‚ö†Ô∏è CRITICAL RESOURCES DETECTED:"
            printf '%s\n' "${CRITICAL_RESOURCES[@]}"
            echo "üö® These resources contain data that may be irreplaceable!"
          fi
          
          # Determine approval requirements
          REQUIRES_CONFIRMATION="true"
          CAN_PROCEED="true"
          
          if [[ "${{ inputs.environment }}" == "production" ]]; then
            echo "üö® PRODUCTION ENVIRONMENT - Extra safety checks required"
            if [[ "${{ inputs.confirmation_text }}" != "${{ inputs.environment }}" ]]; then
              echo "‚ùå Confirmation text must match environment name for production"
              echo "Expected: ${{ inputs.environment }}"
              echo "Received: ${{ inputs.confirmation_text }}"
              CAN_PROCEED="false"
            fi
          elif [[ "${{ inputs.environment }}" == "staging" ]]; then
            echo "‚ö†Ô∏è STAGING ENVIRONMENT - Manual approval required"
          elif [[ "${{ inputs.environment }}" == "dev" && "${{ inputs.auto_approve }}" == "true" ]]; then
            echo "‚úÖ DEV ENVIRONMENT - Auto-approval enabled"
            REQUIRES_CONFIRMATION="false"
          fi
          
          echo "can_proceed=$CAN_PROCEED" >> $GITHUB_OUTPUT
          echo "requires_confirmation=$REQUIRES_CONFIRMATION" >> $GITHUB_OUTPUT
          
          # Create destroy plan for review
          echo "üìã Creating destroy plan..."
          terraform plan \
            -destroy \
            -var-file="environments/${{ inputs.environment }}.tfvars" \
            -out="destroy-plan" \
            -no-color > destroy_plan_output.txt
          
          echo "## üóëÔ∏è Destroy Plan Preview" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -100 destroy_plan_output.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
      
      - name: üì§ Upload Destroy Plan
        uses: actions/upload-artifact@v4
        with:
          name: destroy-plan-${{ inputs.environment }}-${{ github.run_id }}
          path: |
            ${{ inputs.working_directory }}/destroy-plan
            ${{ inputs.working_directory }}/destroy_plan_output.txt
            ${{ inputs.working_directory }}/state_list.txt
          retention-days: 30

  # First approval gate - for staging and production
  primary-approval:
    name: üë• Primary Approval Gate
    runs-on: ubuntu-latest
    needs: pre-destroy-validation
    if: needs.pre-destroy-validation.outputs.can_proceed == 'true' && needs.pre-destroy-validation.outputs.requires_confirmation == 'true'
    environment: 
      name: ${{ inputs.environment }}-destroy-approval
      url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    
    steps:
      - name: ‚ö†Ô∏è Destroy Approval Required
        run: |
          echo "‚ö†Ô∏è DESTROY OPERATION REQUIRES APPROVAL"
          echo ""
          echo "üéØ Environment: ${{ inputs.environment }}"
          echo "üìä Resources to destroy: ${{ needs.pre-destroy-validation.outputs.resource_count }}"
          echo "üìÅ Working directory: ${{ inputs.working_directory }}"
          echo ""
          echo "üö® THIS ACTION WILL PERMANENTLY DELETE INFRASTRUCTURE"
          echo "‚ö° This action cannot be undone!"
          echo ""
          echo "Please review the destroy plan before approving."

  # Secondary approval gate - for production only

  destroy:
    name: üóëÔ∏è Terraform Destroy
    runs-on: ubuntu-latest
    needs: [pre-destroy-validation, primary-approval]
    if: needs.pre-destroy-validation.outputs.can_proceed == 'true'
    outputs:
      destroy_summary: ${{ steps.destroy.outputs.destroy_summary }}
      resources_destroyed: ${{ steps.destroy.outputs.resources_destroyed }}

    steps:
      - name: üîÑ Checkout Repository
        uses: actions/checkout@v4
      
      - name: üîß Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Test AWS Access
        run: |
          aws sts get-caller-identity
          echo "‚úÖ OIDC authentication successful!"
      
    
      
   
      
     
      
      - name: üóëÔ∏è Execute Terraform Destroy
        id: destroy
        working-directory: ${{ inputs.working_directory }}
        run: |
          echo "üóëÔ∏è Starting infrastructure destruction..."
          echo "‚ö†Ô∏è Environment: ${{ inputs.environment }}"
          echo "‚ö†Ô∏è This action is irreversible!"
          
          # Create destroy log file
          DESTROY_LOG="destroy-output-$(date +%Y%m%d-%H%M%S).log"
          
          # Execute destroy
          set +e
          terraform apply \
            -auto-approve \
            -no-color \
            "destroy-plan" 2>&1 | tee "$DESTROY_LOG"
          DESTROY_EXIT_CODE=$?
          set -e
          
          if [[ $DESTROY_EXIT_CODE -eq 0 ]]; then
            echo "‚úÖ Destroy completed successfully"
            
            # Count destroyed resources
            DESTROYED=$(grep -c "destroyed" "$DESTROY_LOG" || echo "0")
            echo "resources_destroyed=$DESTROYED" >> $GITHUB_OUTPUT
            echo "destroy_summary=Destroy completed successfully: $DESTROYED resources destroyed" >> $GITHUB_OUTPUT
            
            # Verify state is empty
            REMAINING_RESOURCES=$(terraform state list | wc -l || echo "0")
            if [[ $REMAINING_RESOURCES -eq 0 ]]; then
              echo "‚úÖ All resources successfully destroyed"
            else
              echo "‚ö†Ô∏è $REMAINING_RESOURCES resources remain in state"
              terraform state list
            fi
          else
            echo "‚ùå Destroy failed with exit code $DESTROY_EXIT_CODE"
            cat "$DESTROY_LOG"
            echo "destroy_summary=Destroy failed" >> $GITHUB_OUTPUT
            exit $DESTROY_EXIT_CODE
          fi
          
          # Display destroy output in step summary
          echo "## üóëÔ∏è Terraform Destroy Results" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat "$DESTROY_LOG" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
      
      - name: üßπ Post-Destroy Cleanup
        if: steps.destroy.outcome == 'success'
        working-directory: ${{ inputs.working_directory }}
        run: |
          echo "üßπ Performing post-destroy cleanup..."
          
          # Check if state is truly empty
          if terraform state list > remaining_resources.txt 2>/dev/null && [[ -s remaining_resources.txt ]]; then
            echo "‚ö†Ô∏è Some resources remain in state:"
            cat remaining_resources.txt
            echo "üîß You may need to manually clean these up"
          else
            echo "‚úÖ State is empty - all resources destroyed"
          fi
          
          # Optional: Remove the state file for dev environment
          if [[ "${{ inputs.environment }}" == "dev" ]]; then
            echo "üóëÔ∏è Considering state file cleanup for dev environment"
            # Note: Uncomment the following lines if you want to remove state for dev
            # aws s3 rm "s3://${{ secrets.TF_STATE_BUCKET }}/${{ inputs.environment }}/terraform.tfstate" || true
            # echo "üóëÔ∏è Dev state file removed from S3"
          fi
      
      - name: üì§ Upload Destroy Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-destroy-${{ inputs.environment }}-${{ github.run_id }}
          path: |
            ${{ inputs.working_directory }}/destroy-output-*.log
            ${{ inputs.working_directory }}/terraform-state-backup-*.json
            ${{ inputs.working_directory }}/local-state-backup-*.json
            ${{ inputs.working_directory }}/remaining_resources.txt
          retention-days: 365  # Keep destroy artifacts longer for audit
          if-no-files-found: warn
      
      - name: üéâ Destroy Success Notification
        if: success()
        run: |
          echo "üéâ Infrastructure successfully destroyed!"
          echo "üóëÔ∏è Environment: ${{ inputs.environment }}"
          echo "üìä Resources destroyed: ${{ steps.destroy.outputs.resources_destroyed }}"
          echo "üíæ Backups created and uploaded as artifacts"
      
      - name: ‚ùå Destroy Failure Notification
        if: failure()
        run: |
          echo "‚ùå Infrastructure destroy failed!"
          echo "üóëÔ∏è Environment: ${{ inputs.environment }}"
          echo "üîç Check the logs above for detailed error information"
          echo "‚ö†Ô∏è Some resources may be in an inconsistent state"
          echo "üõ†Ô∏è Manual intervention may be required"

  # Post-destroy summary
  post-destroy:
    name: üìä Post-Destroy Summary
    runs-on: ubuntu-latest
    needs: [pre-destroy-validation, destroy]
    if: always()
    
    steps:
      - name: üìä Generate Final Summary
        run: |
          echo "## üóëÔ∏è Terraform Destroy Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ inputs.environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Working Directory | ${{ inputs.working_directory }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Version | ${{ inputs.terraform_version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Auto Approve | ${{ inputs.auto_approve }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Initial Resource Count | ${{ needs.pre-destroy-validation.outputs.resource_count }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          DESTROY_RESULT="${{ needs.destroy.result }}"
          if [[ "$DESTROY_RESULT" == "success" ]]; then
            echo "### ‚úÖ Destroy Results" >> $GITHUB_STEP_SUMMARY
            echo "- Status: **Success** ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- Resources Destroyed: ${{ needs.destroy.outputs.resources_destroyed }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üéâ Infrastructure for **${{ inputs.environment }}** has been successfully destroyed!" >> $GITHUB_STEP_SUMMARY
            echo "üíæ State backups have been created and stored as workflow artifacts." >> $GITHUB_STEP_SUMMARY
          elif [[ "$DESTROY_RESULT" == "failure" ]]; then
            echo "### ‚ùå Destroy Failed" >> $GITHUB_STEP_SUMMARY
            echo "- Status: **Failed** ‚ùå" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üîç Infrastructure destruction failed. Please check the destroy job logs." >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è Some resources may be in an inconsistent state and require manual cleanup." >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.pre-destroy-validation.outputs.can_proceed }}" == "false" ]]; then
            echo "### ‚è≠Ô∏è Destroy Skipped" >> $GITHUB_STEP_SUMMARY
            echo "- Status: **Skipped** ‚è≠Ô∏è" >> $GITHUB_STEP_SUMMARY
            echo "- Reason: Validation failed or no resources found" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚è∏Ô∏è Destroy Cancelled" >> $GITHUB_STEP_SUMMARY
            echo "- Status: **Cancelled** ‚è∏Ô∏è" >> $GITHUB_STEP_SUMMARY
            echo "- Reason: Approval not granted or workflow cancelled" >> $GITHUB_STEP_SUMMARY
          fi